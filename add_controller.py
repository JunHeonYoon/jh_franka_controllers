#!/usr/bin/python

import fileinput,re  
import sys

package_name = "jh_franka_controllers" 

def convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def modify_file(file_name,pattern,value="",at_the_end=True):  
    fh=fileinput.input(file_name,inplace=True)  
    for line in fh:  
        if at_the_end:
            replacement=line+value
        else:
            replacement=value+line
        line=re.sub(pattern,replacement,line)  
        sys.stdout.write(line)  
    fh.close()  

def append_file(file_name, value):
    f = open(file_name,'a')
    f.write(value)
    f.close()

def make_file(file_name, value):
    f = open(file_name,'w')
    f.write(value)
    f.close()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("How to use")
        print(sys.argv[0], "ControllerName")
    elif len(sys.argv) == 2:
        controller_name = sys.argv[1]
        print("making controller:", controller_name)

        modify_file("CMakeLists.txt",
                   "add_library\(\$\{PROJECT_NAME\}",
                   "src/" + convert(controller_name) + ".cpp", True)
        modify_file(package_name + "_plugin.xml",
                   "\</library\>",
                   "  <class name=\"" + package_name + "/" + controller_name + "\" type=\"" + package_name + "::" + controller_name + """\" base_class_type=\"controller_interface::ControllerBase\">
    <description>
      A controller that automatically generated by junheon script
    </description>
  </class>\n""", False)


        append_file("config/" + package_name + ".yaml", """
""" + convert(controller_name) + """:
    type: """ + package_name + '/' + controller_name + """
    arm_id: panda
    joint_names:
        - panda_joint1
        - panda_joint2
        - panda_joint3
        - panda_joint4
        - panda_joint5
        - panda_joint6
        - panda_joint7""")
        make_file("launch/{0}.launch".format(convert(controller_name)),
"""<?xml version="1.0" ?>
<launch>
  <arg name="robot_ip" default="172.16.2.2" />
  <arg name="load_gripper" default="true" />
  <include file="$(find franka_control)/launch/franka_control.launch" >
    <arg name="robot_ip" value="$(arg robot_ip)" />
    <arg name="load_gripper" value="$(arg load_gripper)" />
  </include>

  <rosparam command="load" file="$(find {0})/config/{0}.yaml" />
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="{1}"/>
  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find {0})/launch/robot.rviz"/>
</launch>
""".format(package_name,convert(controller_name)))
        make_file('include/{0}/{1}.h'.format(package_name,convert(controller_name)),
"""

#pragma once

#include <memory>
#include <string>
#include <vector>
#include <cmath>
#include <fcntl.h>
#include <termios.h>
#include <thread>
#include <mutex>

#include <controller_interface/controller_base.h>
#include <controller_interface/multi_interface_controller.h>
#include <dynamic_reconfigure/server.h>
#include <franka_hw/franka_model_interface.h>
#include <franka_hw/franka_state_interface.h>
#include <franka/robot_state.h>
#include <franka_hw/trigger_rate.h>
#include <hardware_interface/joint_command_interface.h>
#include <hardware_interface/robot_hw.h>
#include <ros/ros.h>
#include <ros/node_handle.h>
#include <ros/time.h>
#include <geometry_msgs/Twist.h>
#include <Eigen/Dense>
#include <realtime_tools/realtime_publisher.h>
#include <pluginlib/class_list_macros.h>

#include "math_type_define.h"
#include "suhan_benchmark.h"


namespace {0} 
{{

class {1} : public controller_interface::MultiInterfaceController<
								   franka_hw::FrankaModelInterface,
								   hardware_interface::EffortJointInterface,
								   franka_hw::FrankaStateInterface> {{
                     
  bool init(hardware_interface::RobotHW* robot_hw, ros::NodeHandle& node_handle) override;
  void starting(const ros::Time& time) override;
  void update(const ros::Time& time, const ros::Duration& period) override;

 private: 
  // ========================================================================
  // ========================= Franka robot handles =========================
  // ========================================================================
  std::unique_ptr<franka_hw::FrankaModelHandle> model_handle_;
  std::unique_ptr<franka_hw::FrankaStateHandle> state_handle_;
  std::vector<hardware_interface::JointHandle> joint_handles_;

  // ========================================================================
  // =========================== Franka robot Data ==========================
  // ========================================================================
  // ====== Joint space data ======
  // initial state
  Eigen::Vector7d q_init_;
  Eigen::Vector7d qdot_init_;

  // current state
  Eigen::Vector7d q_;
  Eigen::Vector7d qdot_;
  Eigen::Vector7d torque_;

  // control value
  Eigen::Vector7d q_desired_;
  Eigen::Vector7d qdot_desired_;
  Eigen::Vector7d torque_desired_;

  // Dynamics
  Eigen::Matrix7d M_;
  Eigen::Matrix7d M_inv_;
  Eigen::Vector7d c_;
  Eigen::Vector7d g_;

  // ====== Task space data =======
  // initial state
  Eigen::Vector3d x_init_;
  Eigen::Vector6d xdot_init_;
  Eigen::Matrix3d rotation_init_;

  // current state
  Eigen::Vector3d x_;
  Eigen::Vector6d xdot_;
  Eigen::Matrix3d rotation_;
  Eigen::Matrix<double, 6, 7> J_;

  // Dynamics
  Eigen::Matrix6d M_task_;
  Eigen::Vector6d g_task_;
  Eigen::Matrix<double, 6, 7> J_T_inv_;

  // ========================================================================
  // ============================ Mutex & Thread ============================
  // ========================================================================
  std::mutex robot_data_mutex_;
  std::mutex calculation_mutex_;
  bool quit_all_proc_ {{false}};
  std::thread async_calculation_thread_;
  std::thread mode_change_thread_;
  std::thread state_pub_thread_;
  std::condition_variable calculation_cv_;

  // ========================================================================
  // =========================== Controller data ============================
  // ========================================================================
  const double hz_{{1000.}};
  ros::Time start_time_;
  ros::Time play_time_;
  ros::Time control_start_time_;

  enum CTRL_MODE{{NONE, HOME}};
  CTRL_MODE control_mode_{{NONE}};
  bool is_mode_changed_ {{false}};

  franka_hw::TriggerRate print_rate_trigger_{{10}}; 

  SuhanBenchmark bench_timer_;

  // ========================================================================
  // =========================== Thread Functions ===========================
  // ========================================================================	
  void modeChangeReaderProc();
  void asyncCalculationProc();

  // ========================================================================
  // ========================== Utility Functions ===========================
  // ========================================================================					
  void updateRobotData();
  void sendCmdInput();
  void printRobotData();
  int kbhit(void);
  void setMode(const CTRL_MODE& mode);
  Eigen::Vector7d JointPDControl(const Eigen::Vector7d target_q);
}};

}}  // namespace {0}
""".format(package_name,controller_name))
        make_file('src/{0}.cpp'.format(convert(controller_name)),
"""

#include <{0}/{2}.h>

namespace {0}
{{
// ================================================================================================
// ======================================== Core Functions ========================================
// ================================================================================================
bool {1}::init(hardware_interface::RobotHW* robot_hw, ros::NodeHandle& node_handle)
{{
	std::vector<std::string> joint_names;
  std::string arm_id;
  ROS_WARN(
      "ForceExampleController: Make sure your robot's endeffector is in contact "
      "with a horizontal surface before starting the controller!");
  if (!node_handle.getParam("arm_id", arm_id)) {{
    ROS_ERROR("ForceExampleController: Could not read parameter arm_id");
    return false;
  }}
  if (!node_handle.getParam("joint_names", joint_names) || joint_names.size() != 7) {{
    ROS_ERROR(
        "ForceExampleController: Invalid or no joint_names parameters provided, aborting "
        "controller init!");
    return false;
  }}

  auto* model_interface = robot_hw->get<franka_hw::FrankaModelInterface>();
  if (model_interface == nullptr) {{
    ROS_ERROR_STREAM("ForceExampleController: Error getting model interface from hardware");
    return false;
  }}
  try {{
    model_handle_ = std::make_unique<franka_hw::FrankaModelHandle>(
        model_interface->getHandle(arm_id + "_model"));
  }} catch (hardware_interface::HardwareInterfaceException& ex) {{
    ROS_ERROR_STREAM(
        "ForceExampleController: Exception getting model handle from interface: " << ex.what());
    return false;
  }}

  auto* state_interface = robot_hw->get<franka_hw::FrankaStateInterface>();
  if (state_interface == nullptr) {{
    ROS_ERROR_STREAM("ForceExampleController: Error getting state interface from hardware");
    return false;
  }}
  try {{
    state_handle_ = std::make_unique<franka_hw::FrankaStateHandle>(
        state_interface->getHandle(arm_id + "_robot"));
  }} catch (hardware_interface::HardwareInterfaceException& ex) {{
    ROS_ERROR_STREAM(
        "ForceExampleController: Exception getting state handle from interface: " << ex.what());
    return false;
  }}

  auto* effort_joint_interface = robot_hw->get<hardware_interface::EffortJointInterface>();
  if (effort_joint_interface == nullptr) {{
    ROS_ERROR_STREAM("ForceExampleController: Error getting effort joint interface from hardware");
    return false;
  }}
  for (size_t i = 0; i < 7; ++i) {{
    try {{
      joint_handles_.push_back(effort_joint_interface->getHandle(joint_names[i]));
    }} catch (const hardware_interface::HardwareInterfaceException& ex) {{
      ROS_ERROR_STREAM("ForceExampleController: Exception getting joint handles: " << ex.what());
      return false;
    }}
  }}
  
  mode_change_thread_ = std::thread(&{1}::modeChangeReaderProc, this);

  return true;
}}

void {1}::starting(const ros::Time& time) 
{{
  updateRobotData();
  start_time_ = time;
  q_init_ = q_;
  qdot_init_ = qdot_;
  q_desired_ = q_init_;
  qdot_desired_ = qdot_init_;
  x_init_ = x_;
  xdot_init_ = xdot_;
  rotation_init_ = rotation_;
}}

void {1}::update(const ros::Time& time, const ros::Duration& period) 
{{
  play_time_ = time;
  updateRobotData();

  if (calculation_mutex_.try_lock())
  {{
      calculation_mutex_.unlock();
      if(async_calculation_thread_.joinable()) async_calculation_thread_.join();
      async_calculation_thread_ = std::thread(&{1}::asyncCalculationProc, this);
  }}
  auto deadline = std::chrono::steady_clock::now() + std::chrono::milliseconds(1);
  while(std::chrono::steady_clock::now() < deadline)
  {{
      if (calculation_mutex_.try_lock())
      {{
          calculation_mutex_.unlock();
          if(async_calculation_thread_.joinable()) async_calculation_thread_.join();
          break;
      }}
      std::this_thread::yield();
  }}

  printRobotData();
  sendCmdInput();
}}

// ================================================================================================
// ======================================= Thread Functions =======================================
// ================================================================================================
void {1}::modeChangeReaderProc()
{{
   while (!quit_all_proc_)
    {{
      if(kbhit())
      {{
        {{
          std::lock_guard<std::mutex> lock(calculation_mutex_);
          int key = getchar();
          switch (key)
          {{
            case 'h':
              setMode(HOME);
              break;
            default:
              setMode(NONE);
              break;
          }}
        }}
      }}
    }}
}}

void {1}::asyncCalculationProc()
{{
  {{
    std::lock_guard<std::mutex> lock(calculation_mutex_);
    if(is_mode_changed_)
    {{
      is_mode_changed_ = false;
      control_start_time_ = play_time_;
      q_init_ = q_;
      qdot_init_ = qdot_;
      q_desired_ = q_init_;
      qdot_desired_ = qdot_init_;
      x_init_ = x_;
      xdot_init_ = xdot_;
      rotation_init_ = rotation_;
      if(control_mode_ == HOME)
      {{
        std::cout << "======================== Mode cahnge: Home position ========================" << std::endl;
      }}
  }}

  if(control_mode_ == HOME)
  {{
    Eigen::Vector7d target_q;
    target_q << 0, 0, 0, -M_PI/2, 0, M_PI/2, M_PI/4;
    q_desired_ = DyrosMath::cubicVector<7>(play_time_.toSec(), 
                                           control_start_time_.toSec(),
                                           control_start_time_.toSec() + 4.,
                                           q_init_,
                                           target_q,
                                           Eigen::Vector7d::Zero(),
                                           Eigen::Vector7d::Zero()
                                           );
    torque_desired_ = JointPDControl(q_desired_);
  }}
  else
  {{
    torque_desired_ = c_;
  }}
  }}
  calculation_cv_.notify_one();
}}

// ================================================================================================
// ====================================== Utility Functions =======================================
// ================================================================================================	
void {1}::updateRobotData()
{{
  const franka::RobotState &robot_state = state_handle_->getRobotState();
  const std::array<double, 42> &jacobian_array =
      model_handle_->getZeroJacobian(franka::Frame::kEndEffector);
  const std::array<double, 7> &gravity_array = model_handle_->getGravity();
  const std::array<double, 49> &massmatrix_array = model_handle_->getMass();
  const std::array<double, 7> &coriolis_array = model_handle_->getCoriolis();
  {{
    std::lock_guard<std::mutex> lock(robot_data_mutex_);
    q_ = Eigen::Map<const Eigen::Vector7d>(robot_state.q.data());
    qdot_ = Eigen::Map<const Eigen::Vector7d>(robot_state.dq.data());
    torque_ = Eigen::Map<const Eigen::Vector7d>(robot_state.tau_J.data());
    M_ = Eigen::Map<const Eigen::Matrix7d>(massmatrix_array.data());
    M_inv_ = M_.inverse();
    g_ = Eigen::Map<const Eigen::Vector7d>(gravity_array.data());
    c_ = Eigen::Map<const Eigen::Vector7d>(coriolis_array.data());

    Eigen::Affine3d transform;
    transform.matrix() = Eigen::Matrix4d::Map(robot_state.O_T_EE.data());  
    x_ = transform.translation();
    rotation_ = transform.rotation();
    J_ = Eigen::Map<const Eigen::Matrix<double, 6, 7>>(jacobian_array.data());
    xdot_ = J_ * qdot_;
    M_task_ = (J_ * M_inv_ * J_.transpose()).inverse();
    J_T_inv_ = M_task_ * J_ * M_inv_;
    g_task_ = J_T_inv_ * g_;
  }}
}}

void {1}::sendCmdInput()
{{
  for (size_t i = 0; i < 7; ++i) 
  {{
    joint_handles_[i].setCommand(torque_desired_(i));
  }}
}}

void {1}::printRobotData()
{{
  if(print_rate_trigger_())
  {{
    std::cout << "-------------------------------------------------------------------" << std::endl;
    std::cout << "MODE          : " << control_mode_ << std::endl;
    std::cout << "time          : " << std::fixed << std::setprecision(3) << play_time_.toSec() << std::endl;
		std::cout << "q now         :\t";
		std::cout << std::fixed << std::setprecision(3) << q_.transpose() << std::endl;
		std::cout << "q desired     :\t";
		std::cout << std::fixed << std::setprecision(3) << q_desired_.transpose() << std::endl;
    std::cout << "qdot now      :\t";
		std::cout << std::fixed << std::setprecision(3) << qdot_.transpose() << std::endl;
    std::cout << "qdot desired  :\t";
		std::cout << std::fixed << std::setprecision(3) << qdot_desired_.transpose() << std::endl;
    std::cout << "torque desired  :\t";
		std::cout << std::fixed << std::setprecision(3) << torque_desired_.transpose() << std::endl;
		std::cout << "x             :\t";
		std::cout << x_.transpose() << std::endl;
		std::cout << "R             :\t" << std::endl;
		std::cout << std::fixed << std::setprecision(3) << rotation_ << std::endl;
    std::cout << "J             :\t" << std::endl;
		std::cout << std::fixed << std::setprecision(3) << J_ << std::endl;
  }}
}}

int {1}::kbhit(void)
{{
	struct termios oldt, newt;
	int ch;
	int oldf;

	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
	fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

	ch = getchar();

	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	fcntl(STDIN_FILENO, F_SETFL, oldf);

	if(ch != EOF)
	{{
	ungetc(ch, stdin);
	return 1;
	}}

	return 0;
}}

void {1}::setMode(const CTRL_MODE& mode)
{{
  is_mode_changed_ = true;
  control_mode_ = mode;
  std::cout << "Current mode (changed): " << mode << std::endl;
}}

Eigen::Vector7d {1}::JointPDControl(const Eigen::Vector7d target_q)
{{
  double kp, kv;
  kp = 1500;
  kv = 10;

  return M_ * (kp * (target_q - q_) + kv * (-qdot_)) + c_;
}}
}} // namespace {0}



PLUGINLIB_EXPORT_CLASS({0}::{1},
                       controller_interface::ControllerBase)

""".format(package_name,controller_name,convert(controller_name)))